{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Skadi\\\\Projects\\\\truck-dispatcher\\\\src\\\\components\\\\driverProfileLayout\\\\DriverProfile.js\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getDrivers } from \"../../store/actions/driverActions\"; // import DriverProfileButton from \"./DriverProfileButton\";\n\nimport DriverProfileList from \"./DriverProfileList\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router\";\nimport Preloader from \"../layout/Preloader\"; // const DriverProfile = ({ driver: { drivers }, getDrivers }) => {\n\nconst DriverProfile = (props, ownProps) => {\n  useEffect(() => {\n    getDrivers(); //   // eslint-disable-next-line\n  }, []);\n\n  if (props.loading || props.drivers === null) {\n    return React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    });\n  }\n\n  let id = ownProps.match.params.id;\n  console.log(id);\n  return React.createElement(\"div\", {\n    className: \"col s12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, props.driver.drivers && props.driver.drivers.filter(driver => driver.id === id), React.createElement(DriverProfileList, {\n    driver: props.driver,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(\"ul\", {\n    className: \"with-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n};\n\nDriverProfile.propTypes = {\n  driver: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  let id = ownProps.match.params.driver_id; // const drivers = state.driver.drivers;\n  // const driver = drivers ? drivers[id] : null;\n\n  console.log(id); // console.log(driver);\n\n  return {\n    driver: state.driver,\n    id: id\n  };\n}; //.find(driver => driver.id === id)\n// .filter(driver => driver.id === id)\n\n\nexport default withRouter(connect(mapStateToProps, {\n  getDrivers\n})(DriverProfile));","map":{"version":3,"sources":["C:/Users/Skadi/Projects/truck-dispatcher/src/components/driverProfileLayout/DriverProfile.js"],"names":["React","useEffect","connect","getDrivers","DriverProfileList","PropTypes","withRouter","Preloader","DriverProfile","props","ownProps","loading","drivers","id","match","params","console","log","driver","filter","propTypes","object","isRequired","mapStateToProps","state","driver_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,mCAA3B,C,CACA;;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,SAAP,MAAsB,qBAAtB,C,CAEA;;AACA,MAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzCT,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,UAAU,GADI,CAGd;AACD,GAJQ,EAIN,EAJM,CAAT;;AAKA,MAAIM,KAAK,CAACE,OAAN,IAAiBF,KAAK,CAACG,OAAN,KAAkB,IAAvC,EAA6C;AAC3C,WAAO,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,MAAIC,EAAE,GAAGH,QAAQ,CAACI,KAAT,CAAeC,MAAf,CAAsBF,EAA/B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,KAAK,CAACS,MAAN,CAAaN,OAAb,IACCH,KAAK,CAACS,MAAN,CAAaN,OAAb,CAAqBO,MAArB,CAA4BD,MAAM,IAAIA,MAAM,CAACL,EAAP,KAAcA,EAApD,CAFJ,EAGG,oBAAC,iBAAD;AAAmB,IAAA,MAAM,EAAEJ,KAAK,CAACS,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHH,EAIE;AAAI,IAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAqBD,CAjCD;;AAmCAV,aAAa,CAACY,SAAd,GAA0B;AACxBF,EAAAA,MAAM,EAAEb,SAAS,CAACgB,MAAV,CAAiBC;AADD,CAA1B;;AAIA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQd,QAAR,KAAqB;AAC3C,MAAIG,EAAE,GAAGH,QAAQ,CAACI,KAAT,CAAeC,MAAf,CAAsBU,SAA/B,CAD2C,CAE3C;AACA;;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ,EAJ2C,CAK3C;;AACA,SAAO;AACLK,IAAAA,MAAM,EAAEM,KAAK,CAACN,MADT;AAELL,IAAAA,EAAE,EAAEA;AAFC,GAAP;AAID,CAVD,C,CAWA;AACA;;;AACA,eAAeP,UAAU,CACvBJ,OAAO,CAACqB,eAAD,EAAkB;AAAEpB,EAAAA;AAAF,CAAlB,CAAP,CAAyCK,aAAzC,CADuB,CAAzB","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getDrivers } from \"../../store/actions/driverActions\";\r\n// import DriverProfileButton from \"./DriverProfileButton\";\r\nimport DriverProfileList from \"./DriverProfileList\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withRouter } from \"react-router\";\r\nimport Preloader from \"../layout/Preloader\";\r\n\r\n// const DriverProfile = ({ driver: { drivers }, getDrivers }) => {\r\nconst DriverProfile = (props, ownProps) => {\r\n  useEffect(() => {\r\n    getDrivers();\r\n\r\n    //   // eslint-disable-next-line\r\n  }, []);\r\n  if (props.loading || props.drivers === null) {\r\n    return <Preloader />;\r\n  }\r\n  let id = ownProps.match.params.id;\r\n  console.log(id);\r\n\r\n  return (\r\n    <div className=\"col s12\">\r\n      {props.driver.drivers &&\r\n        props.driver.drivers.filter(driver => driver.id === id)}\r\n      {<DriverProfileList driver={props.driver} />}\r\n      <ul className=\"with-header\">\r\n        {/* {props.driver.drivers &&\r\n          props.driver.drivers.map(driver => {\r\n            return <DriverProfileList driver={driver} key={driver.id} />;\r\n          })} */}\r\n\r\n        {/* })} */}\r\n        {/* {<DriverProfileList driver={props.driver} />} */}\r\n\r\n        {/* {props.driver.drivers &&\r\n    props.driver.drivers.map(driver => {\r\n      return <DriverProfileList driver={driver} key={driver.id} />;\r\n    })} */}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nDriverProfile.propTypes = {\r\n  driver: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let id = ownProps.match.params.driver_id;\r\n  // const drivers = state.driver.drivers;\r\n  // const driver = drivers ? drivers[id] : null;\r\n  console.log(id);\r\n  // console.log(driver);\r\n  return {\r\n    driver: state.driver,\r\n    id: id\r\n  };\r\n};\r\n//.find(driver => driver.id === id)\r\n// .filter(driver => driver.id === id)\r\nexport default withRouter(\r\n  connect(mapStateToProps, { getDrivers })(DriverProfile)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}