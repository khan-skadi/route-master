{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\";\nimport reducer from \"./store/reducers/index\";\nimport thunk from \"redux-thunk\";\nimport { getFirestore } from \"redux-firestore\";\nimport { getFirebase } from \"react-redux-firebase\";\nconst initialState = {};\nexport default (() => {\n  return createStore(reducer, initialState, compose(applyMiddleware(thunk.withExtraArgument({\n    getFirestore,\n    getFirebase\n  }))));\n}); // import { createStore, applyMiddleware, compose } from \"redux\";\n// import rootReducer from \"./store/reducers/index\";\n// import thunk from \"redux-thunk\";\n// import { getFirestore } from \"redux-firestore\";\n// import { getFirebase } from \"react-redux-firebase\";\n// import { reactReduxFirebase } from \"react-redux-firebase\";\n// import { reduxFirestore } from \"redux-firestore\"; // <- needed if using firestore\n// import firebase from \"firebase/app\";\n// const initialState = {};\n// const fbConfig = {}; // object containing Firebase config\n// const rrfConfig = { userProfile: \"users\" }; // react-redux-firebase config\n// // Initialize firebase instance\n// firebase.initializeApp(fbConfig);\n// export default () => {\n//   return createStore(\n//     rootReducer,\n//     initialState,\n//     compose(\n//       reactReduxFirebase(firebase, rrfConfig), // pass in firebase instance instead of config\n//       reduxFirestore(firebase), // <- needed if using firestore\n//       applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })) // to add other middleware\n//     )\n//   );\n// };","map":{"version":3,"sources":["C:/Users/Skadi/Projects/truck-dispatcher-working_branch2_router/src/createReduxStore.js"],"names":["createStore","applyMiddleware","compose","reducer","thunk","getFirestore","getFirebase","initialState","withExtraArgument"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,gBAAe,MAAM;AACnB,SAAOP,WAAW,CAChBG,OADgB,EAEhBI,YAFgB,EAGhBL,OAAO,CACLD,eAAe,CAACG,KAAK,CAACI,iBAAN,CAAwB;AAAEH,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAxB,CAAD,CADV,CAHS,CAAlB;AAOD,CARD,E,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport reducer from \"./store/reducers/index\";\r\nimport thunk from \"redux-thunk\";\r\nimport { getFirestore } from \"redux-firestore\";\r\nimport { getFirebase } from \"react-redux-firebase\";\r\n\r\nconst initialState = {};\r\n\r\nexport default () => {\r\n  return createStore(\r\n    reducer,\r\n    initialState,\r\n    compose(\r\n      applyMiddleware(thunk.withExtraArgument({ getFirestore, getFirebase }))\r\n    )\r\n  );\r\n};\r\n\r\n// import { createStore, applyMiddleware, compose } from \"redux\";\r\n// import rootReducer from \"./store/reducers/index\";\r\n// import thunk from \"redux-thunk\";\r\n// import { getFirestore } from \"redux-firestore\";\r\n// import { getFirebase } from \"react-redux-firebase\";\r\n// import { reactReduxFirebase } from \"react-redux-firebase\";\r\n// import { reduxFirestore } from \"redux-firestore\"; // <- needed if using firestore\r\n// import firebase from \"firebase/app\";\r\n\r\n// const initialState = {};\r\n\r\n// const fbConfig = {}; // object containing Firebase config\r\n// const rrfConfig = { userProfile: \"users\" }; // react-redux-firebase config\r\n\r\n// // Initialize firebase instance\r\n// firebase.initializeApp(fbConfig);\r\n\r\n// export default () => {\r\n//   return createStore(\r\n//     rootReducer,\r\n//     initialState,\r\n//     compose(\r\n//       reactReduxFirebase(firebase, rrfConfig), // pass in firebase instance instead of config\r\n//       reduxFirestore(firebase), // <- needed if using firestore\r\n//       applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })) // to add other middleware\r\n//     )\r\n//   );\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}