{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Skadi\\\\Projects\\\\truck-dispatcher-working_branch2_router\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG, UPDATE_LOG, SEARCH_LOGS, SET_CURRENT, CLEAR_CURRENT, ARCHIVE_LOG } from \"../actions/types\";\nconst initialState = {\n  logs: null,\n  current: null,\n  loading: false,\n  archive: [],\n  error: null\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case GET_LOGS:\n      return _objectSpread({}, state, {\n        logs: action.payload,\n        loading: false\n      });\n\n    case ADD_LOG:\n      return _objectSpread({}, state, {\n        logs: [...state.logs, action.payload],\n        loading: false\n      });\n\n    case DELETE_LOG:\n      return _objectSpread({}, state, {\n        logs: state.logs.filter(log => log.id !== action.payload),\n        loading: false\n      });\n\n    case ARCHIVE_LOG:\n      return _objectSpread({}, state, {\n        archive: state.archive.push(state.log.id),\n        loading: false\n      });\n\n    case UPDATE_LOG:\n      return _objectSpread({}, state, {\n        logs: state.logs.map(log => log.id === action.payload.id ? action.payload : log)\n      });\n\n    case SEARCH_LOGS:\n      return _objectSpread({}, state, {\n        logs: action.payload\n      });\n\n    case SET_CURRENT:\n      return _objectSpread({}, state, {\n        current: action.payload\n      });\n\n    case CLEAR_CURRENT:\n      return _objectSpread({}, state, {\n        current: null\n      });\n\n    case SET_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case LOGS_ERROR:\n      console.error(action.payload);\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/Skadi/Projects/truck-dispatcher-working_branch2_router/src/store/reducers/logReducer.js"],"names":["GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","UPDATE_LOG","SEARCH_LOGS","SET_CURRENT","CLEAR_CURRENT","ARCHIVE_LOG","initialState","logs","current","loading","archive","error","state","action","type","payload","filter","log","id","push","map","console"],"mappings":";AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEC,UALF,EAMEC,UANF,EAOEC,WAPF,EAQEC,WARF,EASEC,aATF,EAUEC,WAVF,QAWO,kBAXP;AAaA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,OAAO,EAAE,EAJU;AAKnBC,EAAAA,KAAK,EAAE;AALY,CAArB;AAQA,gBAAe,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKlB,QAAL;AACE,+BACKgB,KADL;AAEEL,QAAAA,IAAI,EAAEM,MAAM,CAACE,OAFf;AAGEN,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKV,OAAL;AACE,+BACKa,KADL;AAEEL,QAAAA,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAV,EAAgBM,MAAM,CAACE,OAAvB,CAFR;AAGEN,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKT,UAAL;AACE,+BACKY,KADL;AAEEL,QAAAA,IAAI,EAAEK,KAAK,CAACL,IAAN,CAAWS,MAAX,CAAkBC,GAAG,IAAIA,GAAG,CAACC,EAAJ,KAAWL,MAAM,CAACE,OAA3C,CAFR;AAGEN,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKJ,WAAL;AACE,+BACKO,KADL;AAEEF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAcS,IAAd,CAAmBP,KAAK,CAACK,GAAN,CAAUC,EAA7B,CAFX;AAGET,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKR,UAAL;AACE,+BACKW,KADL;AAEEL,QAAAA,IAAI,EAAEK,KAAK,CAACL,IAAN,CAAWa,GAAX,CAAeH,GAAG,IACtBA,GAAG,CAACC,EAAJ,KAAWL,MAAM,CAACE,OAAP,CAAeG,EAA1B,GAA+BL,MAAM,CAACE,OAAtC,GAAgDE,GAD5C;AAFR;;AAMF,SAAKf,WAAL;AACE,+BACKU,KADL;AAEEL,QAAAA,IAAI,EAAEM,MAAM,CAACE;AAFf;;AAIF,SAAKZ,WAAL;AACE,+BACKS,KADL;AAEEJ,QAAAA,OAAO,EAAEK,MAAM,CAACE;AAFlB;;AAIF,SAAKX,aAAL;AACE,+BACKQ,KADL;AAEEJ,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKX,WAAL;AACE,+BACKe,KADL;AAEEH,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKX,UAAL;AACEuB,MAAAA,OAAO,CAACV,KAAR,CAAcE,MAAM,CAACE,OAArB;AACA,+BACKH,KADL;AAEED,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFhB;;AAIF;AACE,aAAOH,KAAP;AA3DJ;AA6DD,CA9DD","sourcesContent":["import {\n  GET_LOGS,\n  SET_LOADING,\n  LOGS_ERROR,\n  ADD_LOG,\n  DELETE_LOG,\n  UPDATE_LOG,\n  SEARCH_LOGS,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  ARCHIVE_LOG\n} from \"../actions/types\";\n\nconst initialState = {\n  logs: null,\n  current: null,\n  loading: false,\n  archive: [],\n  error: null\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_LOGS:\n      return {\n        ...state,\n        logs: action.payload,\n        loading: false\n      };\n    case ADD_LOG:\n      return {\n        ...state,\n        logs: [...state.logs, action.payload],\n        loading: false\n      };\n    case DELETE_LOG:\n      return {\n        ...state,\n        logs: state.logs.filter(log => log.id !== action.payload),\n        loading: false\n      };\n    case ARCHIVE_LOG:\n      return {\n        ...state,\n        archive: state.archive.push(state.log.id),\n        loading: false\n      };\n    case UPDATE_LOG:\n      return {\n        ...state,\n        logs: state.logs.map(log =>\n          log.id === action.payload.id ? action.payload : log\n        )\n      };\n    case SEARCH_LOGS:\n      return {\n        ...state,\n        logs: action.payload\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    case LOGS_ERROR:\n      console.error(action.payload);\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}