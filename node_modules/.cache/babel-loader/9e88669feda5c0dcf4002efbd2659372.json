{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Skadi\\\\Projects\\\\truck-dispatcher\\\\src\\\\components\\\\driverProfileLayout\\\\DriverProfile.js\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getDrivers } from \"../../store/actions/driverActions\";\nimport { withRouter } from \"react-router\";\nimport DriverProfileList from \"./DriverProfileList\";\nimport Preloader from \"../layout/Preloader\";\nimport PropTypes from \"prop-types\"; // { driver: { drivers, loading }, getDrivers }\n// const DriverProfile = props => {\n\nconst DriverProfile = ({\n  driver: {\n    drivers,\n    loading\n  }\n}) => {\n  useEffect(() => {\n    getDrivers(); // eslint-disable-next-line\n  }, []);\n\n  if (loading || driver.drivers === null) {\n    return React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"col s12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"with-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, driver.firstName), driver.driver && driver.driver.map(driver => {\n    return React.createElement(DriverProfileList, {\n      driver: driver,\n      key: driver.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    });\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"drivers\")));\n};\n\nDriverProfile.propTypes = {\n  driver: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  console.log(state);\n  let id = ownProps.match.params.driver_id;\n  console.log(id);\n  return {\n    driver: state.driver.drivers && state.driver.drivers.filter(driver => driver.id === id)\n  };\n}; //.find(driver => driver.id === id)\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getDrivers: () => dispatch(getDrivers(dispatch))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DriverProfile));","map":{"version":3,"sources":["C:/Users/Skadi/Projects/truck-dispatcher/src/components/driverProfileLayout/DriverProfile.js"],"names":["React","useEffect","connect","getDrivers","withRouter","DriverProfileList","Preloader","PropTypes","DriverProfile","driver","drivers","loading","firstName","map","id","propTypes","object","isRequired","mapStateToProps","state","ownProps","console","log","match","params","driver_id","filter","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;AACA;;AACA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX;AAAV,CAAD,KAAsC;AAC1DV,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,UAAU,GADI,CAGd;AACD,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAIQ,OAAO,IAAIF,MAAM,CAACC,OAAP,KAAmB,IAAlC,EAAwC;AACtC,WAAO,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,SACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMD,MAAM,CAACG,SAAb,CADF,EAMGH,MAAM,CAACA,MAAP,IACCA,MAAM,CAACA,MAAP,CAAcI,GAAd,CAAkBJ,MAAM,IAAI;AAC1B,WAAO,oBAAC,iBAAD;AAAmB,MAAA,MAAM,EAAEA,MAA3B;AAAmC,MAAA,GAAG,EAAEA,MAAM,CAACK,EAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,CAPJ,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAVF,CADF,CADF;AAgBD,CA3BD;;AA6BAN,aAAa,CAACO,SAAd,GAA0B;AACxBN,EAAAA,MAAM,EAAEF,SAAS,CAACS,MAAV,CAAiBC;AADD,CAA1B;;AAIA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,MAAIL,EAAE,GAAGM,QAAQ,CAACG,KAAT,CAAeC,MAAf,CAAsBC,SAA/B;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYR,EAAZ;AACA,SAAO;AACLL,IAAAA,MAAM,EACJU,KAAK,CAACV,MAAN,CAAaC,OAAb,IACAS,KAAK,CAACV,MAAN,CAAaC,OAAb,CAAqBgB,MAArB,CAA4BjB,MAAM,IAAIA,MAAM,CAACK,EAAP,KAAcA,EAApD;AAHG,GAAP;AAKD,CATD,C,CAUA;;;AAEA,MAAMa,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLzB,IAAAA,UAAU,EAAE,MAAMyB,QAAQ,CAACzB,UAAU,CAACyB,QAAD,CAAX;AADrB,GAAP;AAGD,CAJD;;AAMA,eAAexB,UAAU,CACvBF,OAAO,CAACgB,eAAD,EAAkBS,kBAAlB,CAAP,CAA6CnB,aAA7C,CADuB,CAAzB","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getDrivers } from \"../../store/actions/driverActions\";\r\nimport { withRouter } from \"react-router\";\r\nimport DriverProfileList from \"./DriverProfileList\";\r\nimport Preloader from \"../layout/Preloader\";\r\nimport PropTypes from \"prop-types\";\r\n// { driver: { drivers, loading }, getDrivers }\r\n// const DriverProfile = props => {\r\nconst DriverProfile = ({ driver: { drivers, loading } }) => {\r\n  useEffect(() => {\r\n    getDrivers();\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  if (loading || driver.drivers === null) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"col s12\">\r\n      <ul className=\"with-header\">\r\n        <div>{driver.firstName}</div>\r\n        {/* {props.driver.drivers &&\r\n          props.driver.drivers.map(driver => {\r\n            return <DriverProfileList driver={driver} key={driver.id} />;\r\n          })} */}\r\n        {driver.driver &&\r\n          driver.driver.map(driver => {\r\n            return <DriverProfileList driver={driver} key={driver.id} />;\r\n          })}\r\n        <div>drivers</div>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nDriverProfile.propTypes = {\r\n  driver: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  console.log(state);\r\n  let id = ownProps.match.params.driver_id;\r\n  console.log(id);\r\n  return {\r\n    driver:\r\n      state.driver.drivers &&\r\n      state.driver.drivers.filter(driver => driver.id === id)\r\n  };\r\n};\r\n//.find(driver => driver.id === id)\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getDrivers: () => dispatch(getDrivers(dispatch))\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(DriverProfile)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}