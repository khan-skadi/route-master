{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Skadi\\\\Projects\\\\truck-dispatcher-working_branch2_router\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { GET_DRIVERS, ADD_DRIVER, DELETE_DRIVER, SET_LOADING, DRIVERS_ERROR } from \"../actions/types\";\nconst initStateDriver = {\n  drivers: {},\n  loading: false,\n  error: null\n};\nexport default ((state = initStateDriver, action) => {\n  switch (action.type) {\n    case GET_DRIVERS:\n      return _objectSpread({}, state, {\n        drivers: action.payload,\n        loading: false\n      });\n\n    case ADD_DRIVER:\n      return _objectSpread({}, state, {\n        drivers: [...state.drivers, action.payload],\n        loading: false\n      });\n\n    case DELETE_DRIVER:\n      return _objectSpread({}, state, {\n        drivers: state.drivers.filter(driver => driver.id !== action.payload),\n        loading: false\n      });\n\n    case SET_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case DRIVERS_ERROR:\n      console.log(action.payload);\n      return _objectSpread({}, state, {\n        error: action.payload,\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/Skadi/Projects/truck-dispatcher-working_branch2_router/src/store/reducers/driverReducer.js"],"names":["GET_DRIVERS","ADD_DRIVER","DELETE_DRIVER","SET_LOADING","DRIVERS_ERROR","initStateDriver","drivers","loading","error","state","action","type","payload","filter","driver","id","console","log"],"mappings":";AAAA,SACEA,WADF,EAEEC,UAFF,EAGEC,aAHF,EAIEC,WAJF,EAKEC,aALF,QAMO,kBANP;AAQA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,OAAO,EAAE,EADa;AAEtBC,EAAAA,OAAO,EAAE,KAFa;AAGtBC,EAAAA,KAAK,EAAE;AAHe,CAAxB;AAMA,gBAAe,CAACC,KAAK,GAAGJ,eAAT,EAA0BK,MAA1B,KAAqC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,WAAL;AACE,+BACKS,KADL;AAEEH,QAAAA,OAAO,EAAEI,MAAM,CAACE,OAFlB;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKN,UAAL;AACE,+BACKQ,KADL;AAEEH,QAAAA,OAAO,EAAE,CAAC,GAAGG,KAAK,CAACH,OAAV,EAAmBI,MAAM,CAACE,OAA1B,CAFX;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKL,aAAL;AACE,+BACKO,KADL;AAEEH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,CAAcO,MAAd,CAAqBC,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAcL,MAAM,CAACE,OAApD,CAFX;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAMF,SAAKJ,WAAL;AACE,+BACKM,KADL;AAEEF,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKH,aAAL;AACEY,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACE,OAAnB;AACA,+BACKH,KADL;AAEED,QAAAA,KAAK,EAAEE,MAAM,CAACE,OAFhB;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAKF;AACE,aAAOE,KAAP;AAjCJ;AAmCD,CApCD","sourcesContent":["import {\r\n  GET_DRIVERS,\r\n  ADD_DRIVER,\r\n  DELETE_DRIVER,\r\n  SET_LOADING,\r\n  DRIVERS_ERROR\r\n} from \"../actions/types\";\r\n\r\nconst initStateDriver = {\r\n  drivers: {},\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\nexport default (state = initStateDriver, action) => {\r\n  switch (action.type) {\r\n    case GET_DRIVERS:\r\n      return {\r\n        ...state,\r\n        drivers: action.payload,\r\n        loading: false\r\n      };\r\n    case ADD_DRIVER:\r\n      return {\r\n        ...state,\r\n        drivers: [...state.drivers, action.payload],\r\n        loading: false\r\n      };\r\n    case DELETE_DRIVER:\r\n      return {\r\n        ...state,\r\n        drivers: state.drivers.filter(driver => driver.id !== action.payload),\r\n        loading: false\r\n      };\r\n\r\n    case SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    case DRIVERS_ERROR:\r\n      console.log(action.payload);\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}