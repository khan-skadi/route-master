{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Skadi\\\\Projects\\\\truck-dispatcher-working_branch2_router\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nexport const getDrivers = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/drivers\");\n    const data = await res.json();\n    dispatch({\n      type: \"GET_DRIVERS\",\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: \"DRIVERS_ERROR\",\n      payload: err.response.statusText\n    });\n  }\n};\nexport const addDriver = driver => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/drivers\", {\n      method: \"POST\",\n      body: JSON.stringify(driver),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: \"ADD_DRIVER\",\n      payload: data\n    });\n    console.log(driver);\n  } catch (err) {\n    console.log(\"err response\", err);\n    dispatch({\n      type: \"DRIVERS_ERROR\",\n      payload: err.response.statusText\n    });\n  }\n};\nexport const createDriver = driver => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    firestore.collection(\"drivers\").add(_objectSpread({}, driver, {\n      authorFirstName: \"Net\",\n      authorLastName: \"Ninja\",\n      authorId: 12345,\n      createdAt: new Date()\n    })).then(() => {\n      dispatch({\n        type: \"CREATE_DRIVER\",\n        driver\n      });\n    }).catch(err => {\n      dispatch({\n        type: \"CREATE_DRIVER_ERROR\",\n        err\n      });\n    });\n  };\n};\nexport const deleteDriver = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`/drivers/${id}`, {\n      method: \"DELETE\"\n    });\n    dispatch({\n      type: \"DELETE_DRIVER\",\n      payload: id\n    });\n  } catch (err) {\n    console.log(\"err response\", err);\n    dispatch({\n      type: \"DRIVERS_ERROR\",\n      payload: err.response.statusText\n    });\n  }\n};\nexport const setLoading = () => {\n  return {\n    type: \"SET_LOADING\"\n  };\n};","map":{"version":3,"sources":["C:/Users/Skadi/Projects/truck-dispatcher-working_branch2_router/src/store/actions/driverActions.js"],"names":["getDrivers","dispatch","setLoading","res","fetch","data","json","type","payload","err","response","statusText","addDriver","driver","method","body","JSON","stringify","headers","console","log","createDriver","getState","getFirebase","getFirestore","firestore","collection","add","authorFirstName","authorLastName","authorId","createdAt","Date","then","catch","deleteDriver","id"],"mappings":";AAAA,OAAO,MAAMA,UAAU,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAChD,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,UAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,aADC;AAEPC,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAVD,CAUE,OAAOI,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAjBM;AAmBP,OAAO,MAAMC,SAAS,GAAGC,MAAM,IAAI,MAAMZ,QAAN,IAAkB;AACnD,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,UAAD,EAAa;AAClCU,MAAAA,MAAM,EAAE,MAD0B;AAElCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAF4B;AAGlCK,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHyB,KAAb,CAAvB;AAOA,UAAMb,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAIAc,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACD,GAjBD,CAiBE,OAAOJ,GAAP,EAAY;AACZU,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BX,GAA5B;AACAR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAzBM;AA2BP,OAAO,MAAMU,YAAY,GAAGR,MAAM,IAAI;AACpC,SAAO,CAACZ,QAAD,EAAWqB,QAAX,EAAqB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAArB,KAAuD;AAC5D,UAAMC,SAAS,GAAGD,YAAY,EAA9B;AACAC,IAAAA,SAAS,CACNC,UADH,CACc,SADd,EAEGC,GAFH,mBAGOd,MAHP;AAIIe,MAAAA,eAAe,EAAE,KAJrB;AAKIC,MAAAA,cAAc,EAAE,OALpB;AAMIC,MAAAA,QAAQ,EAAE,KANd;AAOIC,MAAAA,SAAS,EAAE,IAAIC,IAAJ;AAPf,QASGC,IATH,CASQ,MAAM;AACVhC,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAE,eAAR;AAAyBM,QAAAA;AAAzB,OAAD,CAAR;AACD,KAXH,EAYGqB,KAZH,CAYSzB,GAAG,IAAI;AACZR,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAE,qBAAR;AAA+BE,QAAAA;AAA/B,OAAD,CAAR;AACD,KAdH;AAeD,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,MAAM0B,YAAY,GAAGC,EAAE,IAAI,MAAMnC,QAAN,IAAkB;AAClD,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAME,KAAK,CAAE,YAAWgC,EAAG,EAAhB,EAAmB;AAC5BtB,MAAAA,MAAM,EAAE;AADoB,KAAnB,CAAX;AAIAb,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,OAAO,EAAE4B;AAFF,KAAD,CAAR;AAID,GAXD,CAWE,OAAO3B,GAAP,EAAY;AACZU,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BX,GAA5B;AACAR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAnBM;AAqBP,OAAO,MAAMT,UAAU,GAAG,MAAM;AAC9B,SAAO;AACLK,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM","sourcesContent":["export const getDrivers = () => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(\"/drivers\");\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: \"GET_DRIVERS\",\r\n      payload: data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: \"DRIVERS_ERROR\",\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\nexport const addDriver = driver => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(\"/drivers\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(driver),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: \"ADD_DRIVER\",\r\n      payload: data\r\n    });\r\n    console.log(driver);\r\n  } catch (err) {\r\n    console.log(\"err response\", err);\r\n    dispatch({\r\n      type: \"DRIVERS_ERROR\",\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\nexport const createDriver = driver => {\r\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n    const firestore = getFirestore();\r\n    firestore\r\n      .collection(\"drivers\")\r\n      .add({\r\n        ...driver,\r\n        authorFirstName: \"Net\",\r\n        authorLastName: \"Ninja\",\r\n        authorId: 12345,\r\n        createdAt: new Date()\r\n      })\r\n      .then(() => {\r\n        dispatch({ type: \"CREATE_DRIVER\", driver });\r\n      })\r\n      .catch(err => {\r\n        dispatch({ type: \"CREATE_DRIVER_ERROR\", err });\r\n      });\r\n  };\r\n};\r\n\r\nexport const deleteDriver = id => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    await fetch(`/drivers/${id}`, {\r\n      method: \"DELETE\"\r\n    });\r\n\r\n    dispatch({\r\n      type: \"DELETE_DRIVER\",\r\n      payload: id\r\n    });\r\n  } catch (err) {\r\n    console.log(\"err response\", err);\r\n    dispatch({\r\n      type: \"DRIVERS_ERROR\",\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return {\r\n    type: \"SET_LOADING\"\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}