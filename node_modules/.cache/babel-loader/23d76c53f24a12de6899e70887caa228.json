{"ast":null,"code":"// import { createStore, applyMiddleware } from \"redux\";\n// import reducer from \"./store/reducers/index\";\n// import thunk from \"redux-thunk\";\n// import { getFirestore } from \"redux-firestore\";\n// import { getFirebase } from \"react-redux-firebase\";\n// const initialState = {};\n// export default () => {\n//   return createStore(\n//     reducer,\n//     initialState,\n//     applyMiddleware(thunk.withExtraArgument({ getFirestore, getFirebase }))\n//   );\n// };\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"./store/reducers/index\";\nimport thunk from \"redux-thunk\";\nimport { getFirestore } from \"redux-firestore\";\nimport { getFirebase } from \"react-redux-firebase\";\nimport { reactReduxFirebase } from \"react-redux-firebase\";\nimport { reduxFirestore } from \"redux-firestore\"; // <- needed if using firestore\n\nimport firebase from \"firebase/app\";\nconst initialState = {};\nconst fbConfig = {}; // object containing Firebase config\n\nconst rrfConfig = {\n  userProfile: \"users\"\n}; // react-redux-firebase config\n// Initialize firebase instance\n\nfirebase.initializeApp(fbConfig);\nexport default (() => {\n  return createStore(rootReducer, initialState, compose(reactReduxFirebase(firebase, rrfConfig), // pass in firebase instance instead of config\n  reduxFirestore(firebase), // <- needed if using firestore\n  applyMiddleware(thunk) // to add other middleware\n  ));\n});","map":{"version":3,"sources":["C:/Users/Skadi/Projects/truck-dispatcher-working_branch2_router/src/createReduxStore.js"],"names":["createStore","applyMiddleware","compose","rootReducer","thunk","getFirestore","getFirebase","reactReduxFirebase","reduxFirestore","firebase","initialState","fbConfig","rrfConfig","userProfile","initializeApp"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,cAAT,QAA+B,iBAA/B,C,CAAkD;;AAClD,OAAOC,QAAP,MAAqB,cAArB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,QAAQ,GAAG,EAAjB,C,CAAqB;;AACrB,MAAMC,SAAS,GAAG;AAAEC,EAAAA,WAAW,EAAE;AAAf,CAAlB,C,CAA4C;AAE5C;;AACAJ,QAAQ,CAACK,aAAT,CAAuBH,QAAvB;AAEA,gBAAe,MAAM;AACnB,SAAOX,WAAW,CAChBG,WADgB,EAEhBO,YAFgB,EAGhBR,OAAO,CACLK,kBAAkB,CAACE,QAAD,EAAWG,SAAX,CADb,EACoC;AACzCJ,EAAAA,cAAc,CAACC,QAAD,CAFT,EAEqB;AAC1BR,EAAAA,eAAe,CAACG,KAAD,CAHV,CAGkB;AAHlB,GAHS,CAAlB;AASD,CAVD","sourcesContent":["// import { createStore, applyMiddleware } from \"redux\";\r\n// import reducer from \"./store/reducers/index\";\r\n// import thunk from \"redux-thunk\";\r\n// import { getFirestore } from \"redux-firestore\";\r\n// import { getFirebase } from \"react-redux-firebase\";\r\n\r\n// const initialState = {};\r\n\r\n// export default () => {\r\n//   return createStore(\r\n//     reducer,\r\n//     initialState,\r\n//     applyMiddleware(thunk.withExtraArgument({ getFirestore, getFirebase }))\r\n//   );\r\n// };\r\n\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"./store/reducers/index\";\r\nimport thunk from \"redux-thunk\";\r\nimport { getFirestore } from \"redux-firestore\";\r\nimport { getFirebase } from \"react-redux-firebase\";\r\nimport { reactReduxFirebase } from \"react-redux-firebase\";\r\nimport { reduxFirestore } from \"redux-firestore\"; // <- needed if using firestore\r\nimport firebase from \"firebase/app\";\r\n\r\nconst initialState = {};\r\n\r\nconst fbConfig = {}; // object containing Firebase config\r\nconst rrfConfig = { userProfile: \"users\" }; // react-redux-firebase config\r\n\r\n// Initialize firebase instance\r\nfirebase.initializeApp(fbConfig);\r\n\r\nexport default () => {\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n      reactReduxFirebase(firebase, rrfConfig), // pass in firebase instance instead of config\r\n      reduxFirestore(firebase), // <- needed if using firestore\r\n      applyMiddleware(thunk) // to add other middleware\r\n    )\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}