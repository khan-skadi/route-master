{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Skadi\\\\Projects\\\\truck-dispatcher-working_branch2_router\\\\src\\\\components\\\\driverProfileLayout\\\\DriverProfileG.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass DriverProfileG extends Component {\n  // state = {\n  //   id: null\n  // };\n  // getDrivers() {\n  //   this.setState({\n  //     driver: this.driver\n  //   });\n  // }\n  // componentDidMount() {\n  //   this.getDrivers();\n  //   let id = this.props.match.params.driver_id;\n  //   this.setState({\n  //     id: id\n  //   });\n  // }\n  render() {\n    // const { driver } = this.state;\n    // console.log(this.props);\n    // const driver = this.props.driver ? (\n    //   <div>\n    //     <h4 className=\"center\">{this.props.driver.firstName}</h4>\n    //     {/* {this.props.driver.firstName} */}\n    //     <p>Driver 1 NAME</p>\n    //     {/* {this.props.driver.lastName} */}\n    //   </div>\n    // ) : (\n    //   <div className=\"center\">Loading post...</div>\n    // );\n    const driver = this.props.driver ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, this.props.driver.firstName)) : React.createElement(\"div\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Loading post...\");\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, driver); // const { drivers } = this.props;\n    // const driverList = drivers.length ? (\n    //   drivers.map(driver => {\n    //     return (\n    //       <div>\n    //         <div\n    //           className=\"row\"\n    //           style={{ backgroundColor: \"light-blue accent-1\" }}\n    //         >\n    //           <div className=\"col s12 z-depth-1\">\n    //             <span className=\"flow-text\"> DRIVERS > 1234</span>\n    //           </div>\n    //           <br />\n    //           <br />\n    //           <br />\n    //           {/* Main left side */}\n    //           <div className=\"col s4\">\n    //             <div className=\"row\">\n    //               <div className=\"col s10 center\">\n    //                 <span className=\"flow-text center\">12341234</span>\n    //               </div>\n    //               <div className=\"col s2\">\n    //                 <span>\n    //                   <i className=\"fas fa-user-edit small\"></i>\n    //                   <span style={{ fontWeight: \"bold\" }}>EDIT</span>\n    //                 </span>\n    //               </div>\n    //             </div>\n    //           </div>\n    //         </div>\n    //       </div>\n    //     );\n    //   })\n    // ) : (\n    //   <div className=\"center\">No Drivers yet</div>\n    // );\n    // return (\n    //   <div className=\"container\">\n    //     <h4 className=\"center\">Profile</h4>\n    //     {driverList}\n    //   </div>\n    // );\n  }\n\n} // ownProps is the props of this component before we attach the props of the store.\n// Our ownProps are gonna contain information about the route. i.e: \"/driver/1\".\n// Then we use that id to connect to the particular id from the store.\n// const mapStateToProps = (state, ownProps) => {\n//   console.log(state);\n//   let id = ownProps.match.params.id;\n//   return {\n//     driver: state.driver\n//   };\n// };\n\n\nconst mapStateToProps = (state, ownProps) => {\n  let id = ownProps.match.params.driver_id;\n  console.log(id);\n  return {\n    driver: state.drivers.find(driver => driver.id === id)\n  };\n}; // const mapDispatchToProps = dispatch => {\n//   return {\n//     getDrivers: driver => dispatch(getDrivers(driver))\n//   };\n// };\n//.find(driver => driver.id === id)\n\n\nexport default connect(mapStateToProps)(DriverProfileG);","map":{"version":3,"sources":["C:/Users/Skadi/Projects/truck-dispatcher-working_branch2_router/src/components/driverProfileLayout/DriverProfileG.js"],"names":["React","Component","connect","DriverProfileG","render","driver","props","firstName","mapStateToProps","state","ownProps","id","match","params","driver_id","console","log","drivers","find"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,cAAN,SAA6BF,SAA7B,CAAuC;AACrC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAG,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAMC,MAAM,GAAG,KAAKC,KAAL,CAAWD,MAAX,GACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB,KAAKC,KAAL,CAAWD,MAAX,CAAkBE,SAA1C,CADF,CADa,GAKb;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBALF;AAOA,WAAO;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4BF,MAA5B,CAAP,CApBO,CAsBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAnFoC,C,CAsFvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,MAAIC,EAAE,GAAGD,QAAQ,CAACE,KAAT,CAAeC,MAAf,CAAsBC,SAA/B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,EAAZ;AACA,SAAO;AACLN,IAAAA,MAAM,EAAEI,KAAK,CAACQ,OAAN,CAAcC,IAAd,CAAmBb,MAAM,IAAIA,MAAM,CAACM,EAAP,KAAcA,EAA3C;AADH,GAAP;AAGD,CAND,C,CAQA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeT,OAAO,CAACM,eAAD,CAAP,CAAyBL,cAAzB,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass DriverProfileG extends Component {\r\n  // state = {\r\n  //   id: null\r\n  // };\r\n\r\n  // getDrivers() {\r\n  //   this.setState({\r\n  //     driver: this.driver\r\n  //   });\r\n  // }\r\n\r\n  // componentDidMount() {\r\n  //   this.getDrivers();\r\n  //   let id = this.props.match.params.driver_id;\r\n  //   this.setState({\r\n  //     id: id\r\n  //   });\r\n  // }\r\n\r\n  render() {\r\n    // const { driver } = this.state;\r\n    // console.log(this.props);\r\n    // const driver = this.props.driver ? (\r\n    //   <div>\r\n    //     <h4 className=\"center\">{this.props.driver.firstName}</h4>\r\n    //     {/* {this.props.driver.firstName} */}\r\n    //     <p>Driver 1 NAME</p>\r\n    //     {/* {this.props.driver.lastName} */}\r\n    //   </div>\r\n    // ) : (\r\n    //   <div className=\"center\">Loading post...</div>\r\n    // );\r\n    const driver = this.props.driver ? (\r\n      <div>\r\n        <h4 className=\"center\">{this.props.driver.firstName}</h4>\r\n      </div>\r\n    ) : (\r\n      <div className=\"center\">Loading post...</div>\r\n    );\r\n    return <div className=\"container\">{driver}</div>;\r\n\r\n    // const { drivers } = this.props;\r\n    // const driverList = drivers.length ? (\r\n    //   drivers.map(driver => {\r\n    //     return (\r\n    //       <div>\r\n    //         <div\r\n    //           className=\"row\"\r\n    //           style={{ backgroundColor: \"light-blue accent-1\" }}\r\n    //         >\r\n    //           <div className=\"col s12 z-depth-1\">\r\n    //             <span className=\"flow-text\"> DRIVERS > 1234</span>\r\n    //           </div>\r\n    //           <br />\r\n    //           <br />\r\n    //           <br />\r\n    //           {/* Main left side */}\r\n    //           <div className=\"col s4\">\r\n    //             <div className=\"row\">\r\n    //               <div className=\"col s10 center\">\r\n    //                 <span className=\"flow-text center\">12341234</span>\r\n    //               </div>\r\n    //               <div className=\"col s2\">\r\n    //                 <span>\r\n    //                   <i className=\"fas fa-user-edit small\"></i>\r\n    //                   <span style={{ fontWeight: \"bold\" }}>EDIT</span>\r\n    //                 </span>\r\n    //               </div>\r\n    //             </div>\r\n    //           </div>\r\n    //         </div>\r\n    //       </div>\r\n    //     );\r\n    //   })\r\n    // ) : (\r\n    //   <div className=\"center\">No Drivers yet</div>\r\n    // );\r\n    // return (\r\n    //   <div className=\"container\">\r\n    //     <h4 className=\"center\">Profile</h4>\r\n    //     {driverList}\r\n    //   </div>\r\n    // );\r\n  }\r\n}\r\n\r\n// ownProps is the props of this component before we attach the props of the store.\r\n// Our ownProps are gonna contain information about the route. i.e: \"/driver/1\".\r\n// Then we use that id to connect to the particular id from the store.\r\n// const mapStateToProps = (state, ownProps) => {\r\n//   console.log(state);\r\n//   let id = ownProps.match.params.id;\r\n//   return {\r\n//     driver: state.driver\r\n//   };\r\n// };\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  let id = ownProps.match.params.driver_id;\r\n  console.log(id);\r\n  return {\r\n    driver: state.drivers.find(driver => driver.id === id)\r\n  };\r\n};\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//   return {\r\n//     getDrivers: driver => dispatch(getDrivers(driver))\r\n//   };\r\n// };\r\n//.find(driver => driver.id === id)\r\nexport default connect(mapStateToProps)(DriverProfileG);\r\n"]},"metadata":{},"sourceType":"module"}