{"ast":null,"code":"import { SET_LOADING, GET_ARCHS, ADD_ARCH, ARCHS_ERROR, SET_CURRENT } from \"./types\"; // Get archived logs from server\n\nexport const getArchs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/archs\");\n    const data = await res.json();\n    dispatch({\n      type: GET_ARCHS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: ARCHS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Add new archive log to server\n\nexport const addArch = arch => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/archs\", {\n      method: \"POST\",\n      body: JSON.stringify(arch),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_ARCH,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: ARCHS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Set current archive\n\nexport const setCurrent = arch => {\n  return {\n    type: SET_CURRENT,\n    payload: arch\n  };\n};\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["C:/Users/Skadi/Projects/truck-dispatcher/src/store/actions/archActions.js"],"names":["SET_LOADING","GET_ARCHS","ADD_ARCH","ARCHS_ERROR","SET_CURRENT","getArchs","dispatch","setLoading","res","fetch","data","json","type","payload","err","response","statusText","addArch","arch","method","body","JSON","stringify","headers","setCurrent"],"mappings":"AAAA,SACEA,WADF,EAEEC,SAFF,EAGEC,QAHF,EAIEC,WAJF,EAKEC,WALF,QAMO,SANP,C,CAQA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC9C,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,QAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEX,SADC;AAEPY,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAVD,CAUE,OAAOI,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAET,WADC;AAEPU,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAjBM,C,CAmBP;;AACA,OAAO,MAAMC,OAAO,GAAGC,IAAI,IAAI,MAAMZ,QAAN,IAAkB;AAC/C,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,QAAD,EAAW;AAChCU,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAF0B;AAGhCK,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHuB,KAAX,CAAvB;AAOA,UAAMb,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEV,QADC;AAEPW,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAhBD,CAgBE,OAAOI,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAET,WADC;AAEPU,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAvBM,C,CAyBP;;AACA,OAAO,MAAMQ,UAAU,GAAGN,IAAI,IAAI;AAChC,SAAO;AACLN,IAAAA,IAAI,EAAER,WADD;AAELS,IAAAA,OAAO,EAAEK;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMX,UAAU,GAAG,MAAM;AAC9B,SAAO;AACLK,IAAAA,IAAI,EAAEZ;AADD,GAAP;AAGD,CAJM","sourcesContent":["import {\r\n  SET_LOADING,\r\n  GET_ARCHS,\r\n  ADD_ARCH,\r\n  ARCHS_ERROR,\r\n  SET_CURRENT\r\n} from \"./types\";\r\n\r\n// Get archived logs from server\r\nexport const getArchs = () => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(\"/archs\");\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: GET_ARCHS,\r\n      payload: data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: ARCHS_ERROR,\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\n// Add new archive log to server\r\nexport const addArch = arch => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(\"/archs\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(arch),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: ADD_ARCH,\r\n      payload: data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: ARCHS_ERROR,\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\n// Set current archive\r\nexport const setCurrent = arch => {\r\n  return {\r\n    type: SET_CURRENT,\r\n    payload: arch\r\n  };\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return {\r\n    type: SET_LOADING\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}