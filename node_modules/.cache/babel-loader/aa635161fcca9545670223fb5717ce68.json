{"ast":null,"code":"export const getDrivers = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/drivers\");\n    const data = await res.json();\n    dispatch({\n      type: \"GET_DRIVERS\",\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: \"DRIVERS_ERROR\",\n      payload: err.response.statusText\n    });\n  }\n};\nexport const addDriver = driver => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch(\"/drivers\", {\n      method: \"POST\",\n      body: JSON.stringify(driver),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: \"ADD_DRIVER\",\n      payload: data\n    });\n    console.log(driver);\n  } catch (err) {\n    console.log(\"err response\", err);\n    dispatch({\n      type: \"DRIVERS_ERROR\",\n      payload: err.response.statusText\n    });\n  }\n}; // export const createDriver = driver => {\n//   return (dispatch, getState, { getFirebase, getFirestore }) => {\n//     const firestore = getFirestore();\n//     firestore\n//       .collection(\"drivers\")\n//       .add({\n//         ...driver,\n//         authorFirstName: \"Net\",\n//         authorLastName: \"Ninja\",\n//         authorId: 12345,\n//         createdAt: new Date()\n//       })\n//       .then(() => {\n//         dispatch({ type: \"CREATE_DRIVER\", driver });\n//       })\n//       .catch(err => {\n//         dispatch({ type: \"CREATE_DRIVER_ERROR\", err });\n//       });\n//   };\n// };\n\nexport const deleteDriver = id => async dispatch => {\n  try {\n    setLoading();\n    await fetch(`/drivers/${id}`, {\n      method: \"DELETE\"\n    });\n    dispatch({\n      type: \"DELETE_DRIVER\",\n      payload: id\n    });\n  } catch (err) {\n    console.log(\"err response\", err);\n    dispatch({\n      type: \"DRIVERS_ERROR\",\n      payload: err.response.statusText\n    });\n  }\n};\nexport const setLoading = () => {\n  return {\n    type: \"SET_LOADING\"\n  };\n};","map":{"version":3,"sources":["C:/Users/Skadi/Projects/truck-dispatcher/src/store/actions/driverActions.js"],"names":["getDrivers","dispatch","setLoading","res","fetch","data","json","type","payload","err","response","statusText","addDriver","driver","method","body","JSON","stringify","headers","console","log","deleteDriver","id"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAChD,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,UAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,aADC;AAEPC,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAVD,CAUE,OAAOI,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAjBM;AAmBP,OAAO,MAAMC,SAAS,GAAGC,MAAM,IAAI,MAAMZ,QAAN,IAAkB;AACnD,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,UAAD,EAAa;AAClCU,MAAAA,MAAM,EAAE,MAD0B;AAElCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,MAAf,CAF4B;AAGlCK,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHyB,KAAb,CAAvB;AAOA,UAAMb,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAIAc,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACD,GAjBD,CAiBE,OAAOJ,GAAP,EAAY;AACZU,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BX,GAA5B;AACAR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAzBM,C,CA2BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMU,YAAY,GAAGC,EAAE,IAAI,MAAMrB,QAAN,IAAkB;AAClD,MAAI;AACFC,IAAAA,UAAU;AAEV,UAAME,KAAK,CAAE,YAAWkB,EAAG,EAAhB,EAAmB;AAC5BR,MAAAA,MAAM,EAAE;AADoB,KAAnB,CAAX;AAIAb,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,OAAO,EAAEc;AAFF,KAAD,CAAR;AAID,GAXD,CAWE,OAAOb,GAAP,EAAY;AACZU,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BX,GAA5B;AACAR,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAE,eADC;AAEPC,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFf,KAAD,CAAR;AAID;AACF,CAnBM;AAqBP,OAAO,MAAMT,UAAU,GAAG,MAAM;AAC9B,SAAO;AACLK,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM","sourcesContent":["export const getDrivers = () => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(\"/drivers\");\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: \"GET_DRIVERS\",\r\n      payload: data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: \"DRIVERS_ERROR\",\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\nexport const addDriver = driver => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    const res = await fetch(\"/drivers\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(driver),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    });\r\n    const data = await res.json();\r\n\r\n    dispatch({\r\n      type: \"ADD_DRIVER\",\r\n      payload: data\r\n    });\r\n    console.log(driver);\r\n  } catch (err) {\r\n    console.log(\"err response\", err);\r\n    dispatch({\r\n      type: \"DRIVERS_ERROR\",\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\n// export const createDriver = driver => {\r\n//   return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n//     const firestore = getFirestore();\r\n//     firestore\r\n//       .collection(\"drivers\")\r\n//       .add({\r\n//         ...driver,\r\n//         authorFirstName: \"Net\",\r\n//         authorLastName: \"Ninja\",\r\n//         authorId: 12345,\r\n//         createdAt: new Date()\r\n//       })\r\n//       .then(() => {\r\n//         dispatch({ type: \"CREATE_DRIVER\", driver });\r\n//       })\r\n//       .catch(err => {\r\n//         dispatch({ type: \"CREATE_DRIVER_ERROR\", err });\r\n//       });\r\n//   };\r\n// };\r\n\r\nexport const deleteDriver = id => async dispatch => {\r\n  try {\r\n    setLoading();\r\n\r\n    await fetch(`/drivers/${id}`, {\r\n      method: \"DELETE\"\r\n    });\r\n\r\n    dispatch({\r\n      type: \"DELETE_DRIVER\",\r\n      payload: id\r\n    });\r\n  } catch (err) {\r\n    console.log(\"err response\", err);\r\n    dispatch({\r\n      type: \"DRIVERS_ERROR\",\r\n      payload: err.response.statusText\r\n    });\r\n  }\r\n};\r\n\r\nexport const setLoading = () => {\r\n  return {\r\n    type: \"SET_LOADING\"\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}